@page "/"
@page "/{Id:int}"

@using TextBoxApp4.Data
@using TextBoxApp4.Shared

@inject UserDataService UserService;
@inject IJSRuntime JsRuntime;

<div class="container ">
    <div class="border mt-3 p-3">
        <h3>User Master Maintenance</h3>
        <div class="form-group row ">
            <label for="text3a" class="col-sm-2 col-form-label  text-md-right">Id</label>
            <div class="col-sm-3 col-9">
                <input type="number" id="text3a" class="form-control text-right" disabled="@idDisabled" value="@this.User.Id" @onchange="async (e) => await ReloadData(Convert.ToInt32(e.Value)">
            </div>
            <div class="col-sm-1 col-2 mr-2">
                <button class="btn btn-info " @onclick="() => ShowDialog(true)">Search</button>
            </div>
        </div>
        <div class="form-group row">
            <label for="text3b" class="col-sm-2 col-form-label  text-md-right">Name</label>
            <div class="col-sm-5">
                <input type="text" id="text3b" class="form-control" @bind="this.User.Name">
            </div>
        </div>

        <div class="form-group row">
            <label for="text3c" class="col-sm-2 col-form-label text-md-right">Birth</label>
            <div class="col-sm-4">
                <input type="date" id="text3c" class="form-control" @bind="this.User.Birth">
            </div>
        </div>


        <div class="col-sm-8 text-right">
            <button type="submit" class="btn btn-primary" style="width:100px;" @onclick="UpdateUser">更 新</button>
        </div>
        <div class="alert alert-info alert-dismissible fade mt-3 @showInfo">
            @info
            <button class="close" data-dismiss="alert">&times;</button>
        </div>
    </div>
</div>

@*検索ダイアログ*@
@if (showDialog)
{
    <SearchDialog OnSelectItem="@(async (id) => { await Task.Yield(); await ReloadData(id); })"
                  OnDeleteItem="@(async (id) => { await Task.Yield(); await Delete(id); })"
                  OnCloseDialog="@(async ()=> { await Task.Yield(); showDialog = false; })" />
}

@code {
    [Parameter]
    public int Id { get; set; }


    string info = "";

    string showInfo {get{ return string.IsNullOrWhiteSpace(info)? "": "show"; } }

    private User User = new User();

    bool idDisabled = false;
    bool showDialog = false;


    protected override void OnParametersSet()
    {
        if (Id != 0)
        {
            idDisabled = true;
        }
    }

    // ユーザ一覧ダイアログ表示
    void ShowDialog( bool show )
    {
        showDialog = false;
        if( show )
        {
            showDialog = true;
        }
    }

    // ユーザ表示処理
    async Task ReloadData(int id)
    {
        User = await UserService.GetUserByIdAsync(id);
        if (User == null)
        {
            this.User = new User();
            this.User.Id = id;
            this.User.Insert = true;
        }
        ShowInfo("");
        ShowDialog(false);
    }

    // 削除処理
    async Task Delete(int id)
    {
        await UserService.Delete(id);
        await ReloadData(id);
        ShowInfo($"{id}を削除しました");
        ShowDialog(false);
    }

    // 更新処理
    async Task UpdateUser()
    {
        if (this.User.Insert)
        {
            // Insert
            this.User = await UserService.Insert(this.User);
            ShowInfo("登録しました");
        }
        else
        {
            // Update
            this.User = await UserService.Update(this.User);
            ShowInfo("更新しました");
        }
    }

    //ステータスバー表示
    public void ShowInfo(string infoText)
    {
        this.info = infoText;
    }
}


